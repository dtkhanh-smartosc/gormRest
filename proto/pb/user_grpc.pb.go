// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserGRPCServiceClient is the client API for UserGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGRPCServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (UserGRPCService_GetUsersClient, error)
	PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	SearchUser(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (UserGRPCService_SearchUserClient, error)
}

type userGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGRPCServiceClient(cc grpc.ClientConnInterface) UserGRPCServiceClient {
	return &userGRPCServiceClient{cc}
}

func (c *userGRPCServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/routeuser.userGRPCService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGRPCServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (UserGRPCService_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserGRPCService_ServiceDesc.Streams[0], "/routeuser.userGRPCService/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGRPCServiceGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserGRPCService_GetUsersClient interface {
	Recv() (*GetUserResponse, error)
	grpc.ClientStream
}

type userGRPCServiceGetUsersClient struct {
	grpc.ClientStream
}

func (x *userGRPCServiceGetUsersClient) Recv() (*GetUserResponse, error) {
	m := new(GetUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userGRPCServiceClient) PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/routeuser.userGRPCService/PostUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGRPCServiceClient) SearchUser(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (UserGRPCService_SearchUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserGRPCService_ServiceDesc.Streams[1], "/routeuser.userGRPCService/SearchUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGRPCServiceSearchUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserGRPCService_SearchUserClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type userGRPCServiceSearchUserClient struct {
	grpc.ClientStream
}

func (x *userGRPCServiceSearchUserClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserGRPCServiceServer is the server API for UserGRPCService service.
// All implementations should embed UnimplementedUserGRPCServiceServer
// for forward compatibility
type UserGRPCServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUsers(*GetUsersRequest, UserGRPCService_GetUsersServer) error
	PostUser(context.Context, *PostUserRequest) (*GetUserResponse, error)
	SearchUser(*SearchRequest, UserGRPCService_SearchUserServer) error
}

// UnimplementedUserGRPCServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserGRPCServiceServer struct {
}

func (UnimplementedUserGRPCServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserGRPCServiceServer) GetUsers(*GetUsersRequest, UserGRPCService_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserGRPCServiceServer) PostUser(context.Context, *PostUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUser not implemented")
}
func (UnimplementedUserGRPCServiceServer) SearchUser(*SearchRequest, UserGRPCService_SearchUserServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}

// UnsafeUserGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGRPCServiceServer will
// result in compilation errors.
type UnsafeUserGRPCServiceServer interface {
	mustEmbedUnimplementedUserGRPCServiceServer()
}

func RegisterUserGRPCServiceServer(s grpc.ServiceRegistrar, srv UserGRPCServiceServer) {
	s.RegisterService(&UserGRPCService_ServiceDesc, srv)
}

func _UserGRPCService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeuser.userGRPCService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGRPCService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserGRPCServiceServer).GetUsers(m, &userGRPCServiceGetUsersServer{stream})
}

type UserGRPCService_GetUsersServer interface {
	Send(*GetUserResponse) error
	grpc.ServerStream
}

type userGRPCServiceGetUsersServer struct {
	grpc.ServerStream
}

func (x *userGRPCServiceGetUsersServer) Send(m *GetUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserGRPCService_PostUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServiceServer).PostUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeuser.userGRPCService/PostUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServiceServer).PostUser(ctx, req.(*PostUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGRPCService_SearchUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserGRPCServiceServer).SearchUser(m, &userGRPCServiceSearchUserServer{stream})
}

type UserGRPCService_SearchUserServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type userGRPCServiceSearchUserServer struct {
	grpc.ServerStream
}

func (x *userGRPCServiceSearchUserServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UserGRPCService_ServiceDesc is the grpc.ServiceDesc for UserGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routeuser.userGRPCService",
	HandlerType: (*UserGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserGRPCService_GetUser_Handler,
		},
		{
			MethodName: "PostUser",
			Handler:    _UserGRPCService_PostUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _UserGRPCService_GetUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchUser",
			Handler:       _UserGRPCService_SearchUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
